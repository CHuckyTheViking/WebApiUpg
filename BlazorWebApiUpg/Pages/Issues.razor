@page "/issues"
<Authentication />
<h3>Issues</h3>


@if (issues == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenGrid Data="@issues" TItem="SD.Issue" AllowSorting="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true"
                PageSize="4" RowSelect="RowSelect">

        <Columns>
            <RadzenGridColumn  TItem="SD.Issue" Property="Id" Title="Issue Id"></RadzenGridColumn>
            <RadzenGridColumn  TItem="SD.Issue" Property="Customer.CustomerName" Title="Customer"></RadzenGridColumn>
            <RadzenGridColumn Width="300px" TItem="SD.Issue" Property="Text" Title="Text">
                <Template Context="data">
                    <p style="white-space:pre-wrap">@data.Information</p>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn  TItem="SD.Issue" Property="Status.StatusText" Title="Status"></RadzenGridColumn>
            <RadzenGridColumn  TItem="SD.Issue" Property="Created" Title="Created">
                <Template Context="data">
                    @string.Format("{0:d}", data.Created)
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="SD.Issue" Property="User.DisplayName" Title="Created by"></RadzenGridColumn>
        </Columns>
    </RadzenGrid>


    if (selectedIssue != null)
    {


        <RadzenTabs Style="margin-top: 1rem">
            <Tabs>
                <RadzenTabsItem Text="Issue Details">
                    <RadzenGrid EditMode="DataGridEditMode.Single" @ref="issueGrid" Data="@selectedIssue" TItem="SD.Issue">
                        <Columns>

                            <RadzenGridColumn Width="250px" TItem="SD.Issue" Property="Information" Title="Text">
                                <Template Context="data">
                                    <p style="white-space:pre-wrap">@data.Information</p>
                                </Template>
                                <EditTemplate Context="selectedIssue">
                                    <RadzenTextArea @bind-Value="selectedIssue.Information" Style="width:100%" />
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn Width="60px" TItem="SD.Issue" Property="Status.StatusText" Title="Status">
                                <EditTemplate Context="selectedIssue">
                                    <RadzenDropDown  @bind-Value="selectedIssue.StatusId" Data="@statuses" style="width: 100%;" TextProperty="StatusText" ValueProperty="Id">
                                    </RadzenDropDown>
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn Context="data" Width="60px" TItem="SD.Issue" Property="Customer.CustomerName" Title="Customer">
                                <EditTemplate Context="selectedIssue">
                                    <RadzenDropDown @bind-Value="selectedIssue.CustomerId" Data="@customers" style="width: 100%;" TextProperty="CustomerName" ValueProperty="Id">
                                    </RadzenDropDown>
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn Width="60px" TItem="SD.Issue" Property="Created" Title="Created">
                                <Template Context="data">
                                    @string.Format("{0:d}", data.Created)
                                </Template>
                            </RadzenGridColumn>
                            <RadzenGridColumn Width="100px" TItem="SD.Issue" Property="User.DisplayName" Title="Created by">
                                <EditTemplate Context="selectedIssue">
                                    <RadzenDropDown @bind-Value="selectedIssue.UserId" Data="@users" style="width: 100%;" TextProperty="DisplayName" ValueProperty="Id">
                                    </RadzenDropDown>
                                </EditTemplate>
                            </RadzenGridColumn>
                            <RadzenGridColumn TItem="SD.Issue" Context="sampleBlazorModelsSampleOrder" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                                <Template Context="selectedIssue">
                                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(selectedIssue))">
                                    </RadzenButton>
                                </Template>
                                <EditTemplate Context="selectedIssue">
                                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(selectedIssue))">
                                    </RadzenButton>
                                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(selectedIssue))">
                                    </RadzenButton>
                                </EditTemplate>
                            </RadzenGridColumn>
                        </Columns>
                    </RadzenGrid>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Issue Customer">
                    <RadzenGrid Data="@selectedIssue" TItem="SD.Issue">
                        <Columns>
                            <RadzenGridColumn TItem="SD.Issue" Property="Customer.CustomerName" Title="Customer"></RadzenGridColumn>
                            <RadzenGridColumn TItem="SD.Issue" Property="Customer.Contact" Title="Contact"></RadzenGridColumn>
                            <RadzenGridColumn TItem="SD.Issue" Property="Customer.Phone" Title="Phone"></RadzenGridColumn>
                        </Columns>
                    </RadzenGrid>
                </RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    }



}






@code {



    private IEnumerable<SD.Issue> selectedIssue;
    private SD.Issue issue { get; set; }
    private List<SD.Issue> issues { get; set; }
    private IEnumerable<SD.Status> statuses;
    private IEnumerable<SD.Customer> customers;
    private IEnumerable<SD.User> users;
    RadzenGrid<SD.Issue> issueGrid;

    protected override async Task OnInitializedAsync()
    {
        issue = new SD.Issue();
        issues = new List<SD.Issue>();
        await LoadAllAsync();

    }

    private async Task LoadAllAsync()
    {
        
        issues = await Http.GetFromJsonAsync<List<SD.Issue>>("https://localhost:44374/api/Issues/all");
        customers = await Http.GetFromJsonAsync<IEnumerable<SD.Customer>>("https://localhost:44374/api/Customers/all");
        users = await Http.GetFromJsonAsync<IEnumerable<SD.User>>("https://localhost:44374/api/Users/all");
        statuses = await Http.GetFromJsonAsync<IEnumerable<SD.Status>>("https://localhost:44374/api/Issues/statuses");

    }


    void RowSelect(SD.Issue issue)
    {
        selectedIssue = issues.Where(a => a.Id == issue.Id);
    }
    async Task LoadIssues()
    {
        issues = new List<SD.Issue>();
        issues = await Http.GetFromJsonAsync<List<SD.Issue>>("https://localhost:44374/api/Issues/all");
        StateHasChanged();
    }


    void EditRow(SD.Issue issue)
    {
        issueGrid.EditRow(issue);
    }

    async Task SaveRow(SD.Issue issue)
    {
        issueGrid.UpdateRow(issue).GetAwaiter();

        await Http.PostAsJsonAsync<SD.Issue>("https://localhost:44374/api/Issues/update", issue);

        LoadIssues().GetAwaiter();

        selectedIssue = null;
    }

    void CancelEdit(SD.Issue issue)
    {
        issueGrid.CancelEditRow(issue);

    }


}
